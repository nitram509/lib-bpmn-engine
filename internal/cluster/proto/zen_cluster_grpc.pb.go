// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.2
// source: internal/cluster/proto/zen_cluster.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZenServiceClient is the client API for ZenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZenServiceClient interface {
	AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*AddNodeResponse, error)
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
}

type zenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZenServiceClient(cc grpc.ClientConnInterface) ZenServiceClient {
	return &zenServiceClient{cc}
}

func (c *zenServiceClient) AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*AddNodeResponse, error) {
	out := new(AddNodeResponse)
	err := c.cc.Invoke(ctx, "/ZenService/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zenServiceClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, "/ZenService/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZenServiceServer is the server API for ZenService service.
// All implementations must embed UnimplementedZenServiceServer
// for forward compatibility
type ZenServiceServer interface {
	AddNode(context.Context, *AddNodeRequest) (*AddNodeResponse, error)
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	mustEmbedUnimplementedZenServiceServer()
}

// UnimplementedZenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedZenServiceServer struct {
}

func (UnimplementedZenServiceServer) AddNode(context.Context, *AddNodeRequest) (*AddNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedZenServiceServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedZenServiceServer) mustEmbedUnimplementedZenServiceServer() {}

// UnsafeZenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZenServiceServer will
// result in compilation errors.
type UnsafeZenServiceServer interface {
	mustEmbedUnimplementedZenServiceServer()
}

func RegisterZenServiceServer(s grpc.ServiceRegistrar, srv ZenServiceServer) {
	s.RegisterService(&ZenService_ServiceDesc, srv)
}

func _ZenService_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZenService/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).AddNode(ctx, req.(*AddNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZenService_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZenServiceServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZenService/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZenServiceServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZenService_ServiceDesc is the grpc.ServiceDesc for ZenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ZenService",
	HandlerType: (*ZenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _ZenService_AddNode_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _ZenService_GetNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/cluster/proto/zen_cluster.proto",
}
