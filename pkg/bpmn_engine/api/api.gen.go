// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ProcessInstanceState.
const (
	Active     ProcessInstanceState = "active"
	Completed  ProcessInstanceState = "completed"
	Terminated ProcessInstanceState = "terminated"
)

// Activity defines model for Activity.
type Activity struct {
	BpmnElementType      *string    `json:"bpmnElementType,omitempty"`
	CreatedAt            *time.Time `json:"createdAt,omitempty"`
	ElementId            *string    `json:"elementId,omitempty"`
	Key                  *string    `json:"key,omitempty"`
	ProcessDefinitionKey *string    `json:"processDefinitionKey,omitempty"`
	ProcessInstanceKey   *string    `json:"processInstanceKey,omitempty"`
	State                *string    `json:"state,omitempty"`
}

// ActivityPage defines model for ActivityPage.
type ActivityPage struct {
	Count  *int        `json:"count,omitempty"`
	Items  *[]Activity `json:"items,omitempty"`
	Offset *int        `json:"offset,omitempty"`
	Size   *int        `json:"size,omitempty"`
}

// ClusterInfo defines model for ClusterInfo.
type ClusterInfo struct {
	Partitions *[]ClusterPartition `json:"partitions,omitempty"`
}

// ClusterPartition defines model for ClusterPartition.
type ClusterPartition struct {
	Id      *string   `json:"id,omitempty"`
	Leader  *string   `json:"leader,omitempty"`
	Members *[]string `json:"members,omitempty"`
}

// Job defines model for Job.
type Job struct {
	CreatedAt          *time.Time `json:"createdAt,omitempty"`
	ElementId          *string    `json:"elementId,omitempty"`
	ElementInstanceKey *string    `json:"elementInstanceKey,omitempty"`
	Key                *string    `json:"key,omitempty"`
	ProcessInstanceKey *string    `json:"processInstanceKey,omitempty"`
	State              *string    `json:"state,omitempty"`
}

// JobPage defines model for JobPage.
type JobPage struct {
	Count  *int   `json:"count,omitempty"`
	Items  *[]Job `json:"items,omitempty"`
	Offset *int   `json:"offset,omitempty"`
	Size   *int   `json:"size,omitempty"`
}

// PageMetadata defines model for PageMetadata.
type PageMetadata struct {
	Count  *int `json:"count,omitempty"`
	Offset *int `json:"offset,omitempty"`
	Size   *int `json:"size,omitempty"`
}

// ProcessDefinitionDetail defines model for ProcessDefinitionDetail.
type ProcessDefinitionDetail struct {
	BpmnData      *string `json:"bpmnData,omitempty"`
	BpmnProcessId *string `json:"bpmnProcessId,omitempty"`
	Key           *string `json:"key,omitempty"`
	Version       *int    `json:"version,omitempty"`
}

// ProcessDefinitionSimple defines model for ProcessDefinitionSimple.
type ProcessDefinitionSimple struct {
	BpmnProcessId *string `json:"bpmnProcessId,omitempty"`
	Key           *string `json:"key,omitempty"`
	Version       *int    `json:"version,omitempty"`
}

// ProcessDefinitionsPage defines model for ProcessDefinitionsPage.
type ProcessDefinitionsPage struct {
	Count  *int                       `json:"count,omitempty"`
	Items  *[]ProcessDefinitionSimple `json:"items,omitempty"`
	Offset *int                       `json:"offset,omitempty"`
	Size   *int                       `json:"size,omitempty"`
}

// ProcessInstance defines model for ProcessInstance.
type ProcessInstance struct {
	Activities           *string               `json:"activities,omitempty"`
	CaughtEvents         *string               `json:"caughtEvents,omitempty"`
	CompletedAt          *time.Time            `json:"completedAt,omitempty"`
	CreatedAt            *time.Time            `json:"createdAt,omitempty"`
	Key                  *string               `json:"key,omitempty"`
	ProcessDefinitionKey *string               `json:"processDefinitionKey,omitempty"`
	State                *ProcessInstanceState `json:"state,omitempty"`
	VariableHolder       *string               `json:"variableHolder,omitempty"`
}

// ProcessInstanceState defines model for ProcessInstance.State.
type ProcessInstanceState string

// ProcessInstancePage defines model for ProcessInstancePage.
type ProcessInstancePage struct {
	Count  *int               `json:"count,omitempty"`
	Items  *[]ProcessInstance `json:"items,omitempty"`
	Offset *int               `json:"offset,omitempty"`
	Size   *int               `json:"size,omitempty"`
}

// CompleteJobJSONBody defines parameters for CompleteJob.
type CompleteJobJSONBody struct {
	JobKey string `json:"jobKey"`
}

// CreateProcessInstanceJSONBody defines parameters for CreateProcessInstance.
type CreateProcessInstanceJSONBody struct {
	ProcessDefinitionKey string                  `json:"processDefinitionKey"`
	Variables            *map[string]interface{} `json:"variables,omitempty"`
}

// GetProcessInstancesParams defines parameters for GetProcessInstances.
type GetProcessInstancesParams struct {
	ProcessDefinitionKey *int64 `form:"processDefinitionKey,omitempty" json:"processDefinitionKey,omitempty"`
	Offset               *int   `form:"offset,omitempty" json:"offset,omitempty"`
	Size                 *int   `form:"size,omitempty" json:"size,omitempty"`
}

// CompleteJobJSONRequestBody defines body for CompleteJob for application/json ContentType.
type CompleteJobJSONRequestBody CompleteJobJSONBody

// CreateProcessInstanceJSONRequestBody defines body for CreateProcessInstance for application/json ContentType.
type CreateProcessInstanceJSONRequestBody CreateProcessInstanceJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get cluster information
	// (GET /cluster)
	GetClusterInfo(ctx echo.Context) error
	// Rebalance cluster
	// (POST /cluster/rebalance)
	Rebalance(ctx echo.Context) error
	// Complete a job
	// (POST /jobs)
	CompleteJob(ctx echo.Context) error
	// Get list of process definitions
	// (GET /process-definitions)
	GetProcessDefinitions(ctx echo.Context) error
	// Deploy a new process definition
	// (POST /process-definitions)
	CreateProcessDefinition(ctx echo.Context) error
	// Get process definition
	// (GET /process-definitions/{processDefinitionKey})
	GetProcessDefinition(ctx echo.Context, processDefinitionKey int64) error
	// Create a new process instance
	// (POST /process-instances)
	CreateProcessInstance(ctx echo.Context) error
	// Get list of running process instances
	// (GET /process-instances/)
	GetProcessInstances(ctx echo.Context, params GetProcessInstancesParams) error
	// Get state of a process instance selected by processInstanceId
	// (GET /process-instances/{processInstanceKey})
	GetProcessInstance(ctx echo.Context, processInstanceKey int64) error
	// Get list of activities for a process instance
	// (GET /process-instances/{processInstanceKey}/activities)
	GetActivities(ctx echo.Context, processInstanceKey int64) error
	// Get list of jobs for a process instance
	// (GET /process-instances/{processInstanceKey}/jobs)
	GetJobs(ctx echo.Context, processInstanceKey int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetClusterInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClusterInfo(ctx)
	return err
}

// Rebalance converts echo context to params.
func (w *ServerInterfaceWrapper) Rebalance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Rebalance(ctx)
	return err
}

// CompleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) CompleteJob(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CompleteJob(ctx)
	return err
}

// GetProcessDefinitions converts echo context to params.
func (w *ServerInterfaceWrapper) GetProcessDefinitions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProcessDefinitions(ctx)
	return err
}

// CreateProcessDefinition converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProcessDefinition(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProcessDefinition(ctx)
	return err
}

// GetProcessDefinition converts echo context to params.
func (w *ServerInterfaceWrapper) GetProcessDefinition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "processDefinitionKey" -------------
	var processDefinitionKey int64

	err = runtime.BindStyledParameterWithOptions("simple", "processDefinitionKey", ctx.Param("processDefinitionKey"), &processDefinitionKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter processDefinitionKey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProcessDefinition(ctx, processDefinitionKey)
	return err
}

// CreateProcessInstance converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProcessInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProcessInstance(ctx)
	return err
}

// GetProcessInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetProcessInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProcessInstancesParams
	// ------------- Optional query parameter "processDefinitionKey" -------------

	err = runtime.BindQueryParameter("form", true, false, "processDefinitionKey", ctx.QueryParams(), &params.ProcessDefinitionKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter processDefinitionKey: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProcessInstances(ctx, params)
	return err
}

// GetProcessInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetProcessInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "processInstanceKey" -------------
	var processInstanceKey int64

	err = runtime.BindStyledParameterWithOptions("simple", "processInstanceKey", ctx.Param("processInstanceKey"), &processInstanceKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter processInstanceKey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProcessInstance(ctx, processInstanceKey)
	return err
}

// GetActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "processInstanceKey" -------------
	var processInstanceKey int64

	err = runtime.BindStyledParameterWithOptions("simple", "processInstanceKey", ctx.Param("processInstanceKey"), &processInstanceKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter processInstanceKey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetActivities(ctx, processInstanceKey)
	return err
}

// GetJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "processInstanceKey" -------------
	var processInstanceKey int64

	err = runtime.BindStyledParameterWithOptions("simple", "processInstanceKey", ctx.Param("processInstanceKey"), &processInstanceKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter processInstanceKey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetJobs(ctx, processInstanceKey)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/cluster", wrapper.GetClusterInfo)
	router.POST(baseURL+"/cluster/rebalance", wrapper.Rebalance)
	router.POST(baseURL+"/jobs", wrapper.CompleteJob)
	router.GET(baseURL+"/process-definitions", wrapper.GetProcessDefinitions)
	router.POST(baseURL+"/process-definitions", wrapper.CreateProcessDefinition)
	router.GET(baseURL+"/process-definitions/:processDefinitionKey", wrapper.GetProcessDefinition)
	router.POST(baseURL+"/process-instances", wrapper.CreateProcessInstance)
	router.GET(baseURL+"/process-instances/", wrapper.GetProcessInstances)
	router.GET(baseURL+"/process-instances/:processInstanceKey", wrapper.GetProcessInstance)
	router.GET(baseURL+"/process-instances/:processInstanceKey/activities", wrapper.GetActivities)
	router.GET(baseURL+"/process-instances/:processInstanceKey/jobs", wrapper.GetJobs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYTW/jNhD9KwLboxM7bVG0vmU3Qeu02zU2ewt8oKSxwyxFaslRWtfQfy9IfYuULTtO",
	"UOwpjkiOZt5780HtSCSTVAoQqMl8R3T0CAm1P68jZM8Mt+Z3qmQKChnYlTBNxC2HBAR+3qZgHqH9SzQq",
	"JjYkn5BIAUWIr9GsrqVKKJI5iSnCBbIEyMQ9AoXJRew1+AW23uepkhFofQNrJhgyKf7Yv3EhNFIRwdA2",
	"jRR9IeW1xzJ8ggjN3gqiJd3YI5Tzj2syf+gDxhCS7o/vFazJnHw3beCflthPa+CbV1Kl6Nbrw35TxrEP",
	"gDSmSEm+8oTwnmcaQS3EWrpEp1ShxXS886W9ZXVyVBDEOeW4wvyq4EBjUN6lBJIQVNdzZ9Nh1+5k6Hpz",
	"dnVXqwfE+eXttH0nw/PK2gD5Foru7HCZk5nAFgRMIGxAmYNyvdYwsKbZv+Bb8SG37FekG0DKeBfJvTH2",
	"DdyzJOVgsXEr8U0Z50FOV2N8LV/lrfnl5iML9DMoXab0Sejp88pwGNw3kGY3TV2UaVH6y//cpkqzzSPe",
	"Plfd2t0gTSxHVqYTitmLm3FdiUBkCZk/FJGbd9UhmPeCSpgwzpGVx4tnqhgNOfwuub8J5Ic5eBVx1QS/",
	"vqiMRVY27xh0pFhaNFDy6fb+c3C9XARrqQLOwguTwhcgNkxYThmaPCfvlh/+Cm7t0+BjCuJ6uSCtpCWz",
	"y6vLmS2PKQiaMjInP17OLmdkQlKKjxaSaVT0b/N7U5RQgyE1nphqQX4DbA8aE6JAp1LoAuMfZrOiNAuE",
	"ojjTNOUssuenT7ooHgUiI+cP+xoLTheUcjkwkBmh2wnF6DFLEqq2hatB5Nk1IUg32ki1CnZlDlahTxWE",
	"lNdZLbUHhU/1Fj8Afldrw3HP09pc5e+gj08y1MNuvS8zzjRo49jXDDS+k/H2KFK6afMkQ3/q58UbmILY",
	"+Fnu8+u62Ygqg9wB7coF7U6GQVNBunhVcQY0eLKhVmBZeAqkygJ2ETftZ5+o3Wb1mtoeaI0emf/JNAZy",
	"HZThBO1wXLnzPbsblHzQrEzN94vKNhXH49EC+yfhXWDqxmRWnGYwRi6zF+h5ZGPLvTrucrN0UA5iSLnc",
	"OoK9sY8DGgj420POQW4GBD3d+aLJj9K5rf6KJoD2ivWwI8zEZjoCmRBBE4OBF7Q+TxMfx0zgzz81LDcD",
	"4+ot06uc20dx6EmrFzLGyiFiX+VuJ1k9dJyrho8e5qo5rD2T1vrv1nuvzdOq/9mJb6a2YcIrUoJyaO63",
	"GPu0l7GsIabPfsPxAPfTEVm5qI34k/JrBmp7MCuPycKJ33J5gW7bimFNM45kPhtvxt61vUauZq9QEryi",
	"X7ST75TRv+jM/fF/QlAi5ePuwsNtXWVCMLFxFLavuQ+fOUWWO/eLU36EVI9pH+2PWv/75rGvhtybO6+h",
	"grqlweVND+8ONHCIEOIg3AY9lBbx2ficdr9GDFF73ez65ljtfODfk5AtpIYzsNlkr+T0PA3Cy1x14Rvi",
	"7M6sf3NsVZ+s9xBlgRmmyCyfSI6xCeq5wjJTnMzJI2I6n065jCh/lBrnv8x+vSo+4xS2dj2gO/OgaZC9",
	"5Valbxary36+yv8LAAD//3f/sx3QGwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
